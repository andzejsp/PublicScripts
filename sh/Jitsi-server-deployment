#!/bin/bash

# Check if root
if [ `whoami` != 'root' ]
  then
    echo "You must be root to do this."
    exit
fi
# Set user CVARS
# Get user FQDN 
FQDN=$(whiptail --nocancel --title "Enter FQDN or ip" --inputbox "Enter your FQDN or ip and choose Ok to continue." 10 60 3>&1 1>&2 2>&3)
# Do a quick check
if [ -z "$FQDN" ]
then
      echo "FQDN  was empty - Exit"
	  exit
fi

# Get user jitsi token app-id
JAPPID=$(whiptail --nocancel --title "Enter Jitsi-token APP ID " --inputbox "Enter Jitsi-token APP ID  to use for this machine" 10 60 3>&1 1>&2 2>&3)
# Do a quick check
if [ -z "$JAPPID" ]
then
      echo "Jitsi-Token-App-id  was empty - Exit"
	  exit
fi

# Get user jitsi token app-secret
JSECRET=$(whiptail --nocancel --title "Enter Jitsi-token APP secret" --inputbox "Enter Jitsi-token APP secret to use for this machine" 10 60 3>&1 1>&2 2>&3)
# Do a quick check
if [ -z "$JSECRET" ]
then
      echo "Jitsi-Token-App-secret was empty - Exit"
	  exit
fi

# set DEBCONFS with CVARS
echo "jitsi-videobridge jitsi-videobridge/jvb-hostname string $FQDN" | debconf-set-selections
echo "jitsi-meet jitsi-meet/cert-choice select I want to use my own certificate" | debconf-set-selections
echo "jitsi-meet jitsi-meet/cert-path-crt string /etc/ssl/$FQDN.crt" | debconf-set-selections
echo "jitsi-meet jitsi-meet/cert-path-key string /etc/ssl/$FQDN.key" | debconf-set-selections

echo "jitsi-meet-tokens jitsi-meet-tokens/appid string $JAPPID" | debconf-set-selections
echo "jitsi-meet-tokens jitsi-meet-tokens/appsecret string $JSECRET" | debconf-set-selections

#UPDATE PACKAGES
apt update &&
apt install apt-transport-https -y &&
curl https://download.jitsi.org/jitsi-key.gpg.key | sudo sh -c 'gpg --dearmor > /usr/share/keyrings/jitsi-keyring.gpg' 
echo 'deb [signed-by=/usr/share/keyrings/jitsi-keyring.gpg] https://download.jitsi.org stable/' | sudo tee /etc/apt/sources.list.d/jitsi-stable.list > /dev/null

# open ports
ufw allow 22/tcp &&
ufw allow 80/tcp &&
ufw allow 443/tcp &&
ufw allow 10000/udp &&
ufw allow 22/tcp &&
ufw allow 3478/udp &&
ufw allow 5349/tcp &&
ufw allow 5222/tcp &&
printf 'y'|ufw enable

#CREATE CERTS for IP - FQDN
echo "--------------------------- GENERATE my own certs ---------------------------"
sleep 3

openssl req -x509 -nodes -new -sha256 -days 1024 -newkey rsa:2048 -keyout /etc/ssl/$FQDN.key -out  /etc/ssl/$FQDN.pem -subj "/C=US/CN=Example-Root-CA" &&
openssl x509 -outform pem -in /etc/ssl/$FQDN.pem -out /etc/ssl/$FQDN.crt &&

# Install JITSI
apt update &&
echo "--------------------------- INSTALLING JITSI-MEET with my own certs ---------------------------"
sleep 3

apt install jitsi-meet -y &&

# Install lua stuff and prosody
echo "--------------------------- Install lua stuff and prosody ---------------------------"
sleep 3

cd &&
apt-get update -y &&
apt-get install gcc -y &&
apt-get install unzip -y &&
apt-get install lua5.2 -y &&
apt-get install liblua5.2 -y &&
apt-get install luarocks -y &&
luarocks install basexx &&
apt-get install libssl1.0-dev -y &&
luarocks install luacrypto &&
mkdir src &&
cd src &&
luarocks download lua-cjson &&
luarocks unpack lua-cjson-2.1.0.6-1.src.rock &&
cd lua-cjson-2.1.0.6-1/lua-cjson &&
sed -i ‘s/lua_objlen/lua_rawlen/g’ lua_cjson.c &&
sed -i ‘s|$(PREFIX)/include|/usr/include/lua5.2|g’ Makefile &&
luarocks make &&
luarocks install luajwtjitsi &&
cd &&
wget https://prosody.im/files/prosody-debian-packages.key -O- | sudo apt-key add – &&
echo deb http://packages.prosody.im/debian $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list &&
apt-get update -y &&
apt-get upgrade -y &&
apt-get install prosody -y &&
chown root:prosody /etc/prosody/certs/$FQDN.key &&
chmod 644 /etc/prosody/certs/$FQDN.key &&
sleep 2 &&

#Copy generadet CERTS to prosody
echo "--------------------------- Copy generated CERTS to prosody ---------------------------"
sleep 3
cp /etc/ssl/$FQDN.crt /etc/prosody/certs/$FQDN.crt
cp /etc/ssl/$FQDN.key /etc/prosody/certs/$FQDN.key

## install jitsi tokens for real
echo "--------------------------- INSTALLING JITSI-MEET-TOKENS ---------------------------"
sleep 3

apt-get install jitsi-meet-tokens -y

echo "Jitsi-meet-server has been deployed"
echo "Script has ended and done"

