#!/bin/bash

# This script was modified by andzejsp from the original found at https://github.com/switnet-ltd/quick-jibri-installer/blob/master/add-jibri-node.sh
# Bellow this you will find that this is an excerpt from the original add-jibri-node.sh by SwITNet Ltd © on https://github.com/switnet-ltd/quick-jibri-installer
# Added features:
# 	- Nextcloud upload after recording
#	- Post message on mattermost server/channel as bot account with recording details
#	- Delete local recording folder after upload to nextcloud and mattermsot message post.

# Script name, description
SCRIPTNAMEDESCRIPTION="Jibri finalize_recording.sh shellscript with nextcloud upload, mattermost bot post and local folder cleanup, based on SwITNet Ltd add-jibri-node.sh script"

# SwITNet Ltd © --- script START
#
# ------------------------
RECORDINGS_DIR=/var/jbrecord

chmod -R 770 $RECORDINGS_DIR 

# Rename folder.
LJF_PATH="$(find $RECORDINGS_DIR -exec stat --printf="%Y\t%n\n" {} \; | sort -n -r|awk '{print$2}'| grep -v "meta\|-" | head -n1)"
NJF_NAME="$(find $LJF_PATH |grep -e "-"|sed "s|$LJF_PATH/||"|cut -d "." -f1)"
NJF_PATH="$RECORDINGS_DIR/$NJF_NAME"

## Prevent empty recording directory failsafe
if [ "$LJF_PATH" != "$RECORDINGS_DIR" ]; then
  mv $LJF_PATH $NJF_PATH
else
  echo "No new folder recorded, not removing anything."
fi

# ------------------------
#
# SwITNet Ltd © --- script END

#
# ------------------------
# EDITED PART of the original script START
# ------------------------
sleep 1

# Check if recorded file exists
count=5
for i in $(seq $count)
do
  if [ -e $NJF_PATH/$NJF_NAME.mp4 ]; then
    echo "---------------------------"
	echo 'Recording File exists. Continuing..'
	echo "---------------------------"
	break
  else
    echo "---------------------------"
    echo "Waiting for file - $i "
	echo "$NJF_PATH/$NJF_NAME.mp4"
    echo "---------------------------"
	sleep 1
	if [ $i = $count ]; then
	  break
	fi
fi
done

# Last check if recorded file exists - if not then exit script
if [ -e $NJF_PATH/$NJF_NAME.mp4 ]; then
  else
    echo "---------------------------"
    echo "File cannot be found - exiting"
	echo "$NJF_PATH/$NJF_NAME.mp4"
    echo "---------------------------"
	exit
fi

# NEXTCLOUD Credidentials - These needs to be edited
NC_SRV="https://your.domain.com" 		 	# Nextcloud server address
NC_SHARED_RECORDINGS_FOLDER="<RECORDINGS>" 	# Nextcloud server folder to keep all the recordings/recording folders
NC_USER="<user>" 							# Nextcloud account username with upload permissions
NC_PASS="<pass>" 					 		# Nextcloud account password

# Create the shared folder to keep all recordings/recording folders on nextcloud
curl -u $NC_USER:$NC_PASS -X MKCOL "$NC_SRV/nextcloud/remote.php/dav/files/$NC_USER/$NC_SHARED_RECORDINGS_FOLDER/$NJF_NAME"

# Upload file to nextcloud
curl -u $NC_USER:$NC_PASS -T "$NJF_PATH/$NJF_NAME.mp4" "$NC_SRV/nextcloud/remote.php/dav/files/$NC_USER/$NC_SHARED_RECORDINGS_FOLDER/$NJF_NAME/$NJF_NAME.mp4"

# Generate shared link
NC_RECORDING_SHARE_LINK=$(curl -u $NC_USER:$NC_PASS -H "Accept: application/json" -H "OCS-APIRequest: true" -X POST https://cloud.daina-el.lv/ocs/v1.php/apps/files_sharing/api/v1/shares -d path="/RECORDINGS/$NJF_NAME" -d shareType=3 -d permissions=1 | jq -r '.ocs.data.url')

echo "---------------------------"
echo "Recording can be found on: $NC_RECORDING_SHARE_LINK"
echo "---------------------------"


# This script is for posting a message with participants and recording on mattermost channel using bot account. 
# You need to have a bot-account registered on mattermost server and have access-token not token-id
# Mattermost CVARS - These needs to be edited
## Mattermost api url - http://your.domain.com/api/v4
MMAPI_URL='http://your.domain.com/api/v4'

## Mattermost bot token to be able to login and fetch userdata
MMBOT_TOKEN='<bot access token - not token id>'

## Get Mattermost BOT ID
MMBOT_ID=$(curl -s -H 'authorization: Bearer '$MMBOT_TOKEN $MMAPI_URL/users/me | jq -r '.id')

# Mattermost channel name lowercases, spaces replaced with '-' --> team-one
MMTEAM_NAME="team-name"

# Mattermost channel name lowercases, spaces replaced with '-' --> town-square
MMCHANNEL_NAME="channel-name"

## Get Mattermost Channel ID
MMCHANNEL_ID=$(curl -s -H 'authorization: Bearer '$MMBOT_TOKEN $MMAPI_URL/channels | jq -r '.[] | select(.team_name== "'$MMTEAM_NAME'") |select(.name== "'$MMCHANNEL_NAME'").id')

# CVARS
## Date 
DAT=$(date +"%d.%m.%Y | %T")

## Get Files from the recording folder

MANIFEST_FILE_DIR=$(find $NJF_PATH -name '*.json')
URL_TO_RECORDING=$NC_RECORDING_SHARE_LINK

## Gets meeting url from manifest.json
MEETING_URL=$(jq -r '.meeting_url' $MANIFEST_FILE_DIR)

## Get only the meetingname - Jitsi meeting ID
MEETING_NAME=$(echo $MEETING_URL | cut -d'/' -f4- )

## Gets list of participants from manifest.json
PARTICIPANTS_NAME=$(jq -r '.participants[] | .user | .name' $MANIFEST_FILE_DIR)
PARTICIPANTS_ID=$(jq -r '.participants[] | .user | .id' $MANIFEST_FILE_DIR)

## Gets formated usernames from PARTICIPANTS_ID

### Function to get usernames
Get_formated_usernames()
{
for usr in $PARTICIPANTS_ID
do
curl -s -H 'authorization: Bearer '$MMBOT_TOKEN $MMAPI_URL/users/$usr | jq -r '.username' | ts '@' | tr -d ' '
done
}

## Set usernames into a one string
PARTICIPANTS_USERNAME_FORMATED="$(Get_formated_usernames | awk '{ printf("%s ", $0) }')"

## Locales for message constructor - These needs to be edited
MEETING_LOCALE="Meeting"
PARTICIPANTS_LOCALE="Participants"
DOWNLOAD_LOCALE="Download recording here"

## Loacales for card constructor - These needs to be edited
INFO_LOCALE="Information"
MEETING_ID="Meeting ID"

## Message constructor
T_BUILDER="#### #"$MEETING_LOCALE": "$DAT"\n\n"$PARTICIPANTS_LOCALE": "$PARTICIPANTS_USERNAME_FORMATED"\n\n"$DOWNLOAD_LOCALE": [:open_file_folder:]("$URL_TO_RECORDING")"

## Card constructor
C_BUILDER="## "$INFO_LOCALE"\n---\n##### "$MEETING_ID": *"$MEETING_NAME"*\n##### "$PARTICIPANTS_LOCALE": "$PARTICIPANTS_USERNAME_FORMATED"\n"

# Incomming Webhook constructor
card=${C_BUILDER}
text=${T_BUILDER}

## Create Webhook data object
Generate_post_data()
{
  cat <<EOF
{
	"channel_id": "$MMCHANNEL_ID",
	"props": {
		"attachments": [
			{
				"text": "$text"
			}
		],
		"card": "$card"
	}
}
EOF
}

# Sends a webhook to mattermost
curl -i -X POST -H 'Content-Type: application/json' --data "$(Generate_post_data)"  -H 'Authorization: Bearer '$MMBOT_TOKEN $MMAPI_URL/posts

# Remove local recording direcotry and show whats being removed on stdout
rm -rv $NJF_PATH

#
# ------------------------
# EDITED PART of the original script END
# ------------------------

echo
echo "--------------------------- Script completed ---------------------------"
echo "$SCRIPTNAMEDESCRIPTION"
echo
echo

exit 0
